<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 1，配置DBCP的数据源 -->
    <!-- 1,配置德鲁伊连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/jpa?characterEncoding=utf-8"></property>
        <property name="user" value="root"></property>
        <property name="password" value=""></property>
    </bean>

    <!-- 2,创建SqlSessionFactory ，由Spring提供 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 思考mybatis的核心配置部分:数据源，注册实体 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 注册实体，模糊匹配多个mapper映射文件-->
        <property name="packagesToScan" value="com.qf.pojo"></property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL55Dialect</prop>
                <prop key="show_sql">true</prop>
            </props>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
        </property>
    </bean>

    <!-- 3,没有DAO的具体实现类，怎么办？DAO接口扫描动态生成DAO接口的代理实现类
    不需要加id属性，这里扫描的是所有的DAO接口。
    如何把DAO注入给服务层呢？使用注解方式：注入Mapper代理接口。使用自动装配就可以了。 transaction-manager-ref="transactionManager"
    -->
    <jpa:repositories base-package="com.qf.dao" entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>


    <!-- 4,创建服务层对象使用注解方式，注解注入DAO 目标类对象-->
    <!-- 开启注解扫描服务层的注解 -->
    <context:component-scan base-package="com.qf.service"></context:component-scan>
    <!-- 5,创建事务管理通知类对象-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"></property>
    </bean>
    <!-- 6,定义事务通知切面，让事务应用到具体的方法 -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!-- 整合表现层配置 -->
    <!-- 8,注解的处理器映射器和适配器 -->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!-- 9视图解析器:逻辑视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/"></property>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!-- 10扫描 Action-->
    <context:component-scan base-package="com.qf.action"></context:component-scan>



</beans>